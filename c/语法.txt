1：
	打印hello world
2：
	内存？	存储数据的介质
		U盘
		硬盘
		手机内存（存储内存  运行内存）
	断电可保存 手机系统断电可保存
	断电不保存 电脑运行内存  手机运行内存
	C语言代码  ------》编译生成机器码
	1：宏定义以及预编译语句
	2:  检测语法
	3：编译生成机器码   gcc
3：变量
	局部变量	定义在函数内部的变量
	全局变量	定义在函数外面的变量
3.5：
	数值、字符
	ASCii 码表
	数值：  十进制（是以1~9）:				  
			二进制(是以0b): 0b0110 0b0001            
			八进制(是以0)：	05	010
			十六进制(是以0x): 0x01  0xA0 0x12

1	0b00000001	001		0x01
2	0b00000010	002		0x02
3	0b00000011	003		0x03
4	0b00000100	004		0x04
5	0b00000101	005		0x05
6	0b00000110	006		0x06
7	0b00000111	007		0x07
8	0b00001000	010		0x08
9	0b00001001	011		0x09
10	0b00001010	012		0x0A
11	0b00001011	013		0x0B
12	0b00001100	014		0x0C
13	0b00001101	015		0x0D
14	0b00001110	016		0x0E
15	0b00001111	017		0x0F
16	0b00010000	020		0x10

	字符(128 ASCii码表)：
	
		15248045824
		2210
		
	字符	'1'		
			49	
4:
	整形		int(4个) 	long(8个)	short(2个)
	浮点型		float(4个)	double(8个)
	字符型		char(1) -128 +127 

	1个字节是几个位   8位   位：0/1			8位

	+ - * / %

	
运算符转换规则：(四则运算)

	double<-------float
	 ↑
	 |
	  |
	unsigned
	 ↑
	 |
	  |
	int/short int<-------char

for()	
写一个9*9的乘法表

1*1=1
2*1=2 2*2=4
3*1=3 3*2=6 3*3=9
4*1=4 4*2=8 4*3=12 4*4=16

。。。。。

9*1=9    。。。。。。。。。   9*9=81

位操作
11100100
11100100

	左移 <<
	右移 >>
	
	|	或		1|1=1 1|0=1  0|0=0
	&	与		1&1=1 1&0=0  0&0=0
 	~	反		~1=0  ~0=1
	^	异或	1^1=0 0^0=0 1^0=1
	

逻辑判断

	>
	<
	==
	!=
	<=
	>=

	&&	逻辑与
	||	逻辑或
	!	逻辑取反

if(a>b){}

if((a>b)|| (a>c))	{}	//两个条件只要其中一个成立的话，就执行
if((a>b)&& (a>c))	{}	//两个条件都成立的话，就执行

if(!(a>b)) {}			//
	
	
	
if.....else

for(;;)
while()	//先判断后执行
{
}

do		//先执行后判断
{

}while();

switch()
{
	case 1:		break;
	case 2:     break;
	case 3:     break;
	default:    break;
}
	
goto




问题： x年x月x日是该年的第x天

		2000年2月29日   60（31+29）
		2001年2月28日	 59（31+28）
		
2001		（1000 ~9999）
4			（1~12）
30

要求：
2000	（若输入的数值不在1000 9999的区间内 需要重新输入）
2		（1~12）
22		（不能大于每月的最大天数）

输出： 2000年2月22日是该年的第53天


平润年
	（能够被4整除的，并且不能被100整除） 或者 （能够被400整除的）

小学计算
26除以3		8 ...... 2

C语言
	26/3		8
	26%3		2



数组：

	一维数组
	int month_day[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
	
	48个字节的内存空间   (连续的内存)
	
	
	
	month_day[1] = 29; 
	
	month_day+1	1:数组名  2： 内存首地址
	
	
	二维数组
	
	int a[5][10]
	

U盘   8GB
1： 在内存中最小单位是  字节(char)
2： 每个字节都有一个特定的地址编号   0x000000    0x000001	0x000002	

2210

指针：

	内存	：存储数据用的硬件(硬盘  U盘)
	指针	：存储地址编号的变量			(门牌号牌匾)
	地址	：每个字节都含有的一个编号	(门牌号)
	变量	：数值

	关联：
		内存上面 以字节为单位进行划分区间  ,每个字节都含有一个地址编号 
		我们写代码的时候用到这个地址编号(要用指针变量存储这个地址编号)
	
		有一大片内存空间，空间按字节划分区间，每个字节都含有一个地址编号，
		我们需要操作某个区间的话，就需要用到地址编号，存储地址编号的变量就是指针

* 取地址对应内存中间的值
& 内存地址
		
int * pa;	//int类型的指针变量pa
int a=10;	//int类型的变量a

char *pb;	//char类型的指针变量pb
char *b		//char类型的变量b

pa = &a; 	yes
pb=&b;		yes
pb = &a;	no


子函数：

		1：主函数 main(特殊的函数)
		2：普通的子函数
		
	所有的函数都是并列的关系

		int xxx(int a , int b)	//1:函数名 xxx  2: 函数有两个输入参数   3：函数有int类型返回
		{
			.....				//函数体  
		}

	需求： 编写一个 求两个数的较大值	max
		1：函数名  		my_max
		2:输入参数		2
		3：返回参数	需要
	
	
	编写一个求绝对值的函数 函数名为 my_abs
	
		1:函数名   my_abs
		2:输入参数 1
		3：返回参数	需要
	
	
	写法：

		1：写子函数
		2：子函数声明
		3：在主函数中调用子函数
		
一个.c文件进行编程		
/************************************************************/
以一个工程进行编程


多文本编译： (一个工程上面有很多个.c文件)


	.c 源文件：	用于存放 函数 变量
	.h 头文件： 用于存放 函数声明 宏定义 预编译语句

	在一工程中一般有些规则：
		1： main.c		用于存放主函数
		2： 含有xxx.c源文件必须配置一个xxx.h的头文件


	1： 新建一个文件夹，用于存放工程中的源文件和头文件
	2： 打开devcpp.exe 。 选定 文件-->新建--->项目  (basic-->Console Application ---> C项目)
	3： 右键点击 项目1 ，添加文件夹中的源文件(.c) 到工程中
	
	1： xxx.c 	#include "xxx.h"
	2: xxx.h 
		#ifndef __XXX_H_
		#define __XXX_H_
		
		
		#endif
		
		
	(1)  封装一个求圆周长的函数  circle
	(2)	 封装一个求圆面积的函数	 area
	
	主函数里面  我只要从键盘上获取到半径 就能计算出该半径的圆的周长和面积
	
	

结构体：

char 1 -128~127
unsigned char   0~255

	栗子：学生信息 (name  age  number  score  tel addr.....)	36
	
	（1）36*5
	（2）5个数组 (0~35)
	（3） 建立一个模板(name  age  number  score  tel addr)		36个变量

	格式：  "jinqixuan"  9个字符组成的字符串占10个字节  '\0'	字符串结束标识符
			"20171104025"
		struct:
		
		struct student
		{
			char name[20];	//20
			unsigned char age;	//1
			char number[12];	//12
			unsigned char score[5]; 	//5
			char tel[12];	//12
			char addr[30];	//30
		};
		
		
struct student  s1;		//结构体变量
struct student  s2;
struct student *s3;		//结构体指针变量	(手动)
		

int a=1;		//工作原理： 自动申请4个字节的内存空间 用于存放1
int *pa;		//不申请内存空间  (手动申请)
		
	 s1 占多少个字节?
	 s3 占多少个字节? 不占字节


内存拷贝进行赋值	标准库
	
	

链表(数据结构)
	
	
	节点：		36个人   创建36个节点 ，每个节点里面包含了学生个人的信息
	C语言节点使用结构体来进行编写的
	
	head
	第一个节点存放第二个节点的地址
	第二个节点存放第三个节点的地址
	第三个节点存储第四个节点的地址
	.....
	最后一个节点不存放节点地址（放NULL）
	
	O	O	O	O	O	O	O.........	O
